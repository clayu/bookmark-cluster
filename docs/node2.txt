First, a caveat: I think Node.js is wonderful, and has an excellent chance of becoming the gold standard for web applications over the coming year ... but you asked about the disadvantages, so:

Unstable API: The Node API has a habit of changing in backwards-incompatible ways from release to release, and frequent changes to your codebase are required to keep things running on the latest version. That said, things are supposed to be more stable since 0.2.0 has been released.
Lack of a standard library: JavaScript is a language with a beautiful core, but an absolutely anemic standard library -- things that you would take for granted as part of other server-side language installs will simply not be there.
Lack of libraries in general: Need to find a mature database interface? An ORM? An image processing library? An XML parser? An S3 client? -- Since JavaScript hasn't yet enjoyed years of popularity on the server side, things like these are either brand-new and relatively untested, or still-in-the-works.
It's not battle-tested yet: I think it's still a relatively open question about what the pain points are for large Node.js applications -- and until we have some in production for months and years, we're not going to know where the trouble might lie. There isn't anything obvious to be careful of, but it's uncharted territory, with respect to performance, security, and maintainability.
That's about all I can think of -- note that I didn't say the JavaScript was a disadvantage, or the evented model, or V8... I, for one, can't wait to have strong enough library support to justify using it for green field projects, and we seem to be approaching that day quite rapidly.